<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Keith Loy]]></title>
  <link href="http://kloy.github.com/atom.xml" rel="self"/>
  <link href="http://kloy.github.com/"/>
  <updated>2012-10-05T20:56:38-05:00</updated>
  <id>http://kloy.github.com/</id>
  <author>
    <name><![CDATA[Keith Loy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing REST API with Behat]]></title>
    <link href="http://kloy.github.com/blog/2012/05/02/testing-rest-api-with-behat/"/>
    <updated>2012-05-02T08:17:00-05:00</updated>
    <id>http://kloy.github.com/blog/2012/05/02/testing-rest-api-with-behat</id>
    <content type="html"><![CDATA[<p>Today I&#8217;ll cover testing REST APIs with <a href="http://behat.org/">Behat</a>. I will be using
<a href="http://laravel.com/">Laravel</a> to build our sample REST API. Also, I will be using guzzle
as the REST client. This proves to be a much simpler method of testing the REST API then
writing a driver or extending mink.</p>

<p>This is more of an advanced tutorial so I&#8217;m going to skip over some of the more basic
setup steps or just briefly mention them. If you need additional setup help just ask in
the comments.</p>

<p>An example containing all of the code needed can be found on github at
<a href="https://github.com/kloy/behat-rest-testing">behat-rest-testing</a>.</p>

<!--more-->


<h3>Getting Started</h3>

<p>Before we start we need to git a fresh copy of <a href="http://laravel.com/">Laravel</a>.</p>

<pre><code># Clone laravel repo
git://github.com/laravel/laravel.git
</code></pre>

<p>You will also need to setup a vhost with a local url of <strong>foo.local</strong> that points to the <strong>public</strong>
dir of the laravel project.</p>

<p>Now that we have a fresh project go ahead and cd into it and grab composer.</p>

<pre><code># Install composer
curl -s http://getcomposer.org/installer | php
</code></pre>

<p>Awesome, now we are ready to setup our <strong>composer.json</strong> with the necessary
dependencies. Go ahead and create <strong>composer.json</strong> at the top of our project and add the
following to it.</p>

<figure class='code'><figcaption><span>Composer.json (composer.json)</span> <a href='http://kloy.github.com/downloads/code/testing-rest-api-with-behat/composer.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="err">//</span> <span class="err">composer.json</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;behat/behat&quot;</span><span class="p">:</span> <span class="s2">&quot;2.3.*&quot;</span><span class="p">,</span>
</span><span class='line'>    <span class="nt">&quot;guzzle/guzzle&quot;</span><span class="p">:</span> <span class="s2">&quot;2.4.*&quot;</span>
</span><span class='line'>  <span class="p">},</span>
</span><span class='line'>  <span class="nt">&quot;config&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;bin-dir&quot;</span><span class="p">:</span> <span class="s2">&quot;bin/&quot;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have our dependencies listed go ahead and install them.</p>

<pre><code># install composer
php composer.phar install
</code></pre>

<p>You should now have a few libraries in <strong>vendor/</strong> and an executable for <strong>behat</strong> in
<strong>bin/</strong>. We can now go ahead and initialize behat and get to working on our custom REST
Context.</p>

<pre><code># initialize behat
bin/behat --init
</code></pre>

<h3>Writing our REST Context</h3>

<p>Create a file in <strong>features/bootstrap/</strong> called <strong>RestContext.php</strong>. Add the following to
<strong>RestContext.php</strong>&#8230;</p>

<figure class='code'><figcaption><span>features/bootstrap/RestContext.php (RestContext.php)</span> <a href='http://kloy.github.com/downloads/code/testing-rest-api-with-behat/RestContext.php'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
<span class='line-number'>48</span>
<span class='line-number'>49</span>
<span class='line-number'>50</span>
<span class='line-number'>51</span>
<span class='line-number'>52</span>
<span class='line-number'>53</span>
<span class='line-number'>54</span>
<span class='line-number'>55</span>
<span class='line-number'>56</span>
<span class='line-number'>57</span>
<span class='line-number'>58</span>
<span class='line-number'>59</span>
<span class='line-number'>60</span>
<span class='line-number'>61</span>
<span class='line-number'>62</span>
<span class='line-number'>63</span>
<span class='line-number'>64</span>
<span class='line-number'>65</span>
<span class='line-number'>66</span>
<span class='line-number'>67</span>
<span class='line-number'>68</span>
<span class='line-number'>69</span>
<span class='line-number'>70</span>
<span class='line-number'>71</span>
<span class='line-number'>72</span>
<span class='line-number'>73</span>
<span class='line-number'>74</span>
<span class='line-number'>75</span>
<span class='line-number'>76</span>
<span class='line-number'>77</span>
<span class='line-number'>78</span>
<span class='line-number'>79</span>
<span class='line-number'>80</span>
<span class='line-number'>81</span>
<span class='line-number'>82</span>
<span class='line-number'>83</span>
<span class='line-number'>84</span>
<span class='line-number'>85</span>
<span class='line-number'>86</span>
<span class='line-number'>87</span>
<span class='line-number'>88</span>
<span class='line-number'>89</span>
<span class='line-number'>90</span>
<span class='line-number'>91</span>
<span class='line-number'>92</span>
<span class='line-number'>93</span>
<span class='line-number'>94</span>
<span class='line-number'>95</span>
<span class='line-number'>96</span>
<span class='line-number'>97</span>
<span class='line-number'>98</span>
<span class='line-number'>99</span>
<span class='line-number'>100</span>
<span class='line-number'>101</span>
<span class='line-number'>102</span>
<span class='line-number'>103</span>
<span class='line-number'>104</span>
<span class='line-number'>105</span>
<span class='line-number'>106</span>
<span class='line-number'>107</span>
<span class='line-number'>108</span>
<span class='line-number'>109</span>
<span class='line-number'>110</span>
<span class='line-number'>111</span>
<span class='line-number'>112</span>
<span class='line-number'>113</span>
<span class='line-number'>114</span>
<span class='line-number'>115</span>
<span class='line-number'>116</span>
<span class='line-number'>117</span>
<span class='line-number'>118</span>
<span class='line-number'>119</span>
<span class='line-number'>120</span>
<span class='line-number'>121</span>
<span class='line-number'>122</span>
<span class='line-number'>123</span>
<span class='line-number'>124</span>
<span class='line-number'>125</span>
<span class='line-number'>126</span>
<span class='line-number'>127</span>
<span class='line-number'>128</span>
<span class='line-number'>129</span>
<span class='line-number'>130</span>
<span class='line-number'>131</span>
<span class='line-number'>132</span>
<span class='line-number'>133</span>
<span class='line-number'>134</span>
<span class='line-number'>135</span>
<span class='line-number'>136</span>
<span class='line-number'>137</span>
<span class='line-number'>138</span>
<span class='line-number'>139</span>
<span class='line-number'>140</span>
<span class='line-number'>141</span>
<span class='line-number'>142</span>
<span class='line-number'>143</span>
<span class='line-number'>144</span>
<span class='line-number'>145</span>
<span class='line-number'>146</span>
<span class='line-number'>147</span>
<span class='line-number'>148</span>
<span class='line-number'>149</span>
<span class='line-number'>150</span>
<span class='line-number'>151</span>
<span class='line-number'>152</span>
<span class='line-number'>153</span>
<span class='line-number'>154</span>
<span class='line-number'>155</span>
<span class='line-number'>156</span>
<span class='line-number'>157</span>
<span class='line-number'>158</span>
<span class='line-number'>159</span>
<span class='line-number'>160</span>
<span class='line-number'>161</span>
<span class='line-number'>162</span>
<span class='line-number'>163</span>
<span class='line-number'>164</span>
<span class='line-number'>165</span>
<span class='line-number'>166</span>
<span class='line-number'>167</span>
<span class='line-number'>168</span>
<span class='line-number'>169</span>
<span class='line-number'>170</span>
<span class='line-number'>171</span>
<span class='line-number'>172</span>
<span class='line-number'>173</span>
<span class='line-number'>174</span>
<span class='line-number'>175</span>
<span class='line-number'>176</span>
<span class='line-number'>177</span>
<span class='line-number'>178</span>
<span class='line-number'>179</span>
<span class='line-number'>180</span>
<span class='line-number'>181</span>
<span class='line-number'>182</span>
<span class='line-number'>183</span>
<span class='line-number'>184</span>
<span class='line-number'>185</span>
<span class='line-number'>186</span>
<span class='line-number'>187</span>
<span class='line-number'>188</span>
<span class='line-number'>189</span>
<span class='line-number'>190</span>
<span class='line-number'>191</span>
<span class='line-number'>192</span>
<span class='line-number'>193</span>
<span class='line-number'>194</span>
<span class='line-number'>195</span>
<span class='line-number'>196</span>
<span class='line-number'>197</span>
<span class='line-number'>198</span>
<span class='line-number'>199</span>
<span class='line-number'>200</span>
<span class='line-number'>201</span>
<span class='line-number'>202</span>
<span class='line-number'>203</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Behat\Behat\Context\BehatContext</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Symfony\Component\Yaml\Yaml</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Rest context.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">RestContext</span> <span class="k">extends</span> <span class="nx">BehatContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_restObject</span>        <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_restObjectType</span>    <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_restObjectMethod</span>  <span class="o">=</span> <span class="s1">&#39;get&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_client</span>            <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_response</span>          <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_requestUrl</span>        <span class="o">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nv">$_parameters</span>           <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Initializes context.</span>
</span><span class='line'><span class="sd">     * Every scenario gets it&#39;s own context object.</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="k">array</span> <span class="nv">$parameters</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Initialize your context here</span>
</span><span class='line'>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObject</span>  <span class="o">=</span> <span class="k">new</span> <span class="k">stdClass</span><span class="p">();</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_client</span>      <span class="o">=</span> <span class="k">new</span> <span class="nx">Guzzle\Service\Client</span><span class="p">();</span>
</span><span class='line'>      <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_parameters</span> <span class="o">=</span> <span class="nv">$parameters</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">getParameter</span><span class="p">(</span><span class="nv">$name</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nb">count</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_parameters</span><span class="p">)</span> <span class="o">===</span> <span class="mi">0</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;Parameters not loaded!&#39;</span><span class="p">);</span>
</span><span class='line'>      <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>
</span><span class='line'>            <span class="nv">$parameters</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_parameters</span><span class="p">;</span>
</span><span class='line'>            <span class="k">return</span> <span class="p">(</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$parameters</span><span class="p">[</span><span class="nv">$name</span><span class="p">]))</span> <span class="o">?</span> <span class="nv">$parameters</span><span class="p">[</span><span class="nv">$name</span><span class="p">]</span> <span class="o">:</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Given /^that I want to make a new &quot;([^&quot;]*)&quot;$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">thatIWantToMakeANew</span><span class="p">(</span><span class="nv">$objectType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObjectType</span>   <span class="o">=</span> <span class="nx">ucwords</span><span class="p">(</span><span class="nx">strtolower</span><span class="p">(</span><span class="nv">$objectType</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObjectMethod</span> <span class="o">=</span> <span class="s1">&#39;post&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Given /^that I want to find a &quot;([^&quot;]*)&quot;$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">thatIWantToFindA</span><span class="p">(</span><span class="nv">$objectType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObjectType</span>   <span class="o">=</span> <span class="nx">ucwords</span><span class="p">(</span><span class="nx">strtolower</span><span class="p">(</span><span class="nv">$objectType</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObjectMethod</span> <span class="o">=</span> <span class="s1">&#39;get&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Given /^that I want to delete a &quot;([^&quot;]*)&quot;$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">thatIWantToDeleteA</span><span class="p">(</span><span class="nv">$objectType</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObjectType</span>   <span class="o">=</span> <span class="nx">ucwords</span><span class="p">(</span><span class="nx">strtolower</span><span class="p">(</span><span class="nv">$objectType</span><span class="p">));</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObjectMethod</span> <span class="o">=</span> <span class="s1">&#39;delete&#39;</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Given /^that its &quot;([^&quot;]*)&quot; is &quot;([^&quot;]*)&quot;$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">thatTheItsIs</span><span class="p">(</span><span class="nv">$propertyName</span><span class="p">,</span> <span class="nv">$propertyValue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObject</span><span class="o">-&gt;</span><span class="nv">$propertyName</span> <span class="o">=</span> <span class="nv">$propertyValue</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @When /^I request &quot;([^&quot;]*)&quot;$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">iRequest</span><span class="p">(</span><span class="nv">$pageUrl</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$baseUrl</span>          <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">getParameter</span><span class="p">(</span><span class="s1">&#39;base_url&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_requestUrl</span>  <span class="o">=</span> <span class="nv">$baseUrl</span><span class="o">.</span><span class="nv">$pageUrl</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">switch</span> <span class="p">(</span><span class="nx">strtoupper</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObjectMethod</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">case</span> <span class="s1">&#39;GET&#39;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_client</span>
</span><span class='line'>                    <span class="o">-&gt;</span><span class="na">get</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_requestUrl</span><span class="o">.</span><span class="s1">&#39;?&#39;</span><span class="o">.</span><span class="nb">http_build_str</span><span class="p">((</span><span class="k">array</span><span class="p">)</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObject</span><span class="p">))</span>
</span><span class='line'>                    <span class="o">-&gt;</span><span class="na">send</span><span class="p">();</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="s1">&#39;POST&#39;</span><span class="o">:</span>
</span><span class='line'>                <span class="nv">$postFields</span> <span class="o">=</span> <span class="p">(</span><span class="k">array</span><span class="p">)</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObject</span><span class="p">;</span>
</span><span class='line'>                <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_client</span>
</span><span class='line'>                    <span class="o">-&gt;</span><span class="na">post</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_requestUrl</span><span class="p">,</span><span class="k">null</span><span class="p">,</span><span class="nv">$postFields</span><span class="p">)</span>
</span><span class='line'>                    <span class="o">-&gt;</span><span class="na">send</span><span class="p">();</span>
</span><span class='line'>                <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="k">case</span> <span class="s1">&#39;DELETE&#39;</span><span class="o">:</span>
</span><span class='line'>              <span class="nv">$response</span> <span class="o">=</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_client</span>
</span><span class='line'>                    <span class="o">-&gt;</span><span class="na">delete</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_requestUrl</span><span class="o">.</span><span class="s1">&#39;?&#39;</span><span class="o">.</span><span class="nb">http_build_str</span><span class="p">((</span><span class="k">array</span><span class="p">)</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_restObject</span><span class="p">))</span>
</span><span class='line'>                    <span class="o">-&gt;</span><span class="na">send</span><span class="p">();</span>
</span><span class='line'>              <span class="k">break</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span> <span class="o">=</span> <span class="nv">$response</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Then /^the response is JSON$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">theResponseIsJson</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(</span><span class="k">true</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">empty</span><span class="p">(</span><span class="nv">$data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Response was not JSON</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Given /^the response has a &quot;([^&quot;]*)&quot; property$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">theResponseHasAProperty</span><span class="p">(</span><span class="nv">$propertyName</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(</span><span class="k">true</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$data</span><span class="o">-&gt;</span><span class="nv">$propertyName</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Property &#39;&quot;</span><span class="o">.</span><span class="nv">$propertyName</span><span class="o">.</span><span class="s2">&quot;&#39; is not set!</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Response was not JSON</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(</span><span class="k">true</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Then /^the &quot;([^&quot;]*)&quot; property equals &quot;([^&quot;]*)&quot;$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">thePropertyEquals</span><span class="p">(</span><span class="nv">$propertyName</span><span class="p">,</span> <span class="nv">$propertyValue</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(</span><span class="k">true</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$data</span><span class="o">-&gt;</span><span class="nv">$propertyName</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Property &#39;&quot;</span><span class="o">.</span><span class="nv">$propertyName</span><span class="o">.</span><span class="s2">&quot;&#39; is not set!</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="nv">$data</span><span class="o">-&gt;</span><span class="nv">$propertyName</span> <span class="o">!==</span> <span class="nv">$propertyValue</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>              <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;Property value mismatch! (given: &#39;</span><span class="o">.</span><span class="nv">$propertyValue</span><span class="o">.</span><span class="s1">&#39;, match: &#39;</span><span class="o">.</span><span class="nv">$data</span><span class="o">-&gt;</span><span class="nv">$propertyName</span><span class="o">.</span><span class="s1">&#39;)&#39;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Response was not JSON</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(</span><span class="k">true</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Given /^the type of the &quot;([^&quot;]*)&quot; property is ([^&quot;]*)$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">theTypeOfThePropertyIsNumeric</span><span class="p">(</span><span class="nv">$propertyName</span><span class="p">,</span><span class="nv">$typeString</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$data</span> <span class="o">=</span> <span class="nb">json_decode</span><span class="p">(</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(</span><span class="k">true</span><span class="p">));</span>
</span><span class='line'>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="k">empty</span><span class="p">(</span><span class="nv">$data</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">isset</span><span class="p">(</span><span class="nv">$data</span><span class="o">-&gt;</span><span class="nv">$propertyName</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Property &#39;&quot;</span><span class="o">.</span><span class="nv">$propertyName</span><span class="o">.</span><span class="s2">&quot;&#39; is not set!</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="c1">// check our type</span>
</span><span class='line'>            <span class="k">switch</span> <span class="p">(</span><span class="nx">strtolower</span><span class="p">(</span><span class="nv">$typeString</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                <span class="k">case</span> <span class="s1">&#39;numeric&#39;</span><span class="o">:</span>
</span><span class='line'>                    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nb">is_numeric</span><span class="p">(</span><span class="nv">$data</span><span class="o">-&gt;</span><span class="nv">$propertyName</span><span class="p">))</span> <span class="p">{</span>
</span><span class='line'>                        <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Property &#39;&quot;</span><span class="o">.</span><span class="nv">$propertyName</span><span class="o">.</span><span class="s2">&quot;&#39; is not of the correct type: &quot;</span><span class="o">.</span><span class="nv">$theTypeOfThePropertyIsNumeric</span><span class="o">.</span><span class="s2">&quot;!</span><span class="se">\n</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                    <span class="k">break</span><span class="p">;</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
</span><span class='line'>            <span class="k">throw</span> <span class="k">new</span> <span class="nx">Exception</span><span class="p">(</span><span class="s2">&quot;Response was not JSON</span><span class="se">\n</span><span class="s2">&quot;</span> <span class="o">.</span> <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span><span class="o">-&gt;</span><span class="na">getBody</span><span class="p">(</span><span class="k">true</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Then /^the response status code should be (\d+)$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">theResponseStatusCodeShouldBe</span><span class="p">(</span><span class="nv">$httpStatus</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">((</span><span class="nx">string</span><span class="p">)</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">()</span> <span class="o">!==</span> <span class="nv">$httpStatus</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>          <span class="k">throw</span> <span class="k">new</span> <span class="nx">\Exception</span><span class="p">(</span><span class="s1">&#39;HTTP code does not match &#39;</span><span class="o">.</span><span class="nv">$httpStatus</span><span class="o">.</span>
</span><span class='line'>              <span class="s1">&#39; (actual: &#39;</span><span class="o">.</span><span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span><span class="o">-&gt;</span><span class="na">getStatusCode</span><span class="p">()</span><span class="o">.</span><span class="s1">&#39;)&#39;</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>     <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * @Then /^echo last response$/</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">echoLastResponse</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">printDebug</span><span class="p">(</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_requestUrl</span><span class="o">.</span><span class="s2">&quot;</span><span class="se">\n\n</span><span class="s2">&quot;</span><span class="o">.</span>
</span><span class='line'>            <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">_response</span>
</span><span class='line'>        <span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So that was a bit of code. I&#8217;ll sort of explain it in a moment after we get it working. In
order for these steps to work we need to add <strong>RestContext</strong> as a sub context to <strong>FeatureContext</strong>.
Let&#8217;s do that.</p>

<figure class='code'><figcaption><span>features/bootstrap/FeatureContext.php (FeatureContext.php)</span> <a href='http://kloy.github.com/downloads/code/testing-rest-api-with-behat/FeatureContext.php'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">use</span> <span class="nx">Behat\Behat\Context\ClosuredContextInterface</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Behat\Behat\Context\TranslatedContextInterface</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Behat\Behat\Context\BehatContext</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Behat\Behat\Exception\PendingException</span><span class="p">;</span>
</span><span class='line'><span class="k">use</span> <span class="nx">Behat\Gherkin\Node\PyStringNode</span><span class="p">,</span>
</span><span class='line'>    <span class="nx">Behat\Gherkin\Node\TableNode</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">// Require 3rd-party libraries here:</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="c1">//   require_once &#39;PHPUnit/Autoload.php&#39;;</span>
</span><span class='line'><span class="c1">//   require_once &#39;PHPUnit/Framework/Assert/Functions.php&#39;;</span>
</span><span class='line'><span class="c1">//</span>
</span><span class='line'><span class="k">require_once</span> <span class="s1">&#39;RestContext.php&#39;</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="sd">/**</span>
</span><span class='line'><span class="sd"> * Features context.</span>
</span><span class='line'><span class="sd"> */</span>
</span><span class='line'><span class="k">class</span> <span class="nc">FeatureContext</span> <span class="k">extends</span> <span class="nx">BehatContext</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="sd">/**</span>
</span><span class='line'><span class="sd">     * Initializes context.</span>
</span><span class='line'><span class="sd">     * Every scenario gets it&#39;s own context object.</span>
</span><span class='line'><span class="sd">     *</span>
</span><span class='line'><span class="sd">     * @param   array   $parameters     context parameters (set them up through behat.yml)</span>
</span><span class='line'><span class="sd">     */</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">function</span> <span class="nf">__construct</span><span class="p">(</span><span class="k">array</span> <span class="nv">$parameters</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Initialize your context here</span>
</span><span class='line'>        <span class="nv">$this</span><span class="o">-&gt;</span><span class="na">useContext</span><span class="p">(</span><span class="s1">&#39;RestContext&#39;</span><span class="p">,</span> <span class="k">new</span> <span class="nx">RestContext</span><span class="p">(</span><span class="nv">$parameters</span><span class="p">));</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>So what we did is require our RestContext.php file and instantiate it in
<code>$this-&gt;useContext('RestContext', new RestContext($parameters));</code>. Now when you type
<strong>bin/behat -dl</strong> you should see a list commands that look like&#8230;</p>

<pre><code># output from cli
Given /^that I want to make a new "([^"]*)"$/
Given /^that I want to find a "([^"]*)"$/
Given /^that I want to delete a "([^"]*)"$/
Given /^that its "([^"]*)" is "([^"]*)"$/
When /^I request "([^"]*)"$/
Then /^the response is JSON$/
Given /^the response has a "([^"]*)" property$/
Then /^the "([^"]*)" property equals "([^"]*)"$/
Given /^the type of the "([^"]*)" property is ([^"]*)$/
Then /^the response status code should be (\d+)$/
Then /^echo last response$/
</code></pre>

<p>All of these steps are coming from our RestContext class.</p>

<h3>Adding behat.yml</h3>

<p>We need a config file for behat specifying where our api is. Create the file <strong>behat.yml</strong>
at the top dir of your project.</p>

<figure class='code'><figcaption><span>behat.yml  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="l-Scalar-Plain">default</span><span class="p-Indicator">:</span>
</span><span class='line'>  <span class="l-Scalar-Plain">context</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">parameters</span><span class="p-Indicator">:</span>
</span><span class='line'><span class="err">        </span><span class="l-Scalar-Plain">base_url</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">http://foo.local</span>
</span></code></pre></td></tr></table></div></figure>


<p>The property <strong>base_url</strong> is where we specified the location of our api.</p>

<h3>Writing our features</h3>

<p>Now that all the ground work is in place, let&#8217;s write a few features for testing. Go ahead
and create a file <strong>features/user.feature</strong> and add the following to it.</p>

<figure class='code'><figcaption><span>features/user.feature (user.feature)</span> <a href='http://kloy.github.com/downloads/code/testing-rest-api-with-behat/user.feature'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
</pre></td><td class='code'><pre><code class='yaml'><span class='line'><span class="c1"># features/user.feature</span>
</span><span class='line'><span class="err">    </span><span class="l-Scalar-Plain">Feature</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Testing the RESTfulness of the Index controller</span>
</span><span class='line'>    <span class="l-Scalar-Plain">Let&#39;s see how RESTish this is</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">Scenario</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Creating a new User</span>
</span><span class='line'>        <span class="l-Scalar-Plain">Given that I want to make a new &quot;User&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">And that its &quot;name&quot; is &quot;Chris&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">When I request &quot;/user&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">Then the response is JSON</span>
</span><span class='line'>        <span class="l-Scalar-Plain">And the response has a &quot;userId&quot; property</span>
</span><span class='line'>        <span class="l-Scalar-Plain">And the type of the &quot;userId&quot; property is numeric</span>
</span><span class='line'>        <span class="l-Scalar-Plain">Then the response status code should be 200</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">Scenario</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Finding a User</span>
</span><span class='line'>        <span class="l-Scalar-Plain">Given that I want to find a &quot;User&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">And that its &quot;name&quot; is &quot;Chris&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">When I request &quot;/user&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">Then the &quot;name&quot; property equals &quot;Chris&quot;</span>
</span><span class='line'>
</span><span class='line'>    <span class="l-Scalar-Plain">Scenario</span><span class="p-Indicator">:</span> <span class="l-Scalar-Plain">Deleting a User</span>
</span><span class='line'>        <span class="l-Scalar-Plain">Given that I want to delete a &quot;User&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">And that its &quot;name&quot; is &quot;Chris&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">When I request &quot;/user&quot;</span>
</span><span class='line'>        <span class="l-Scalar-Plain">Then the &quot;status&quot; property equals &quot;true&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now that we have our feature let&#8217;s run it with <strong>bin/behat features/user.feature</strong>. You should
get errors with a large amount of html spit back out at you. This is because Laravel
does not have a route/api for what is being tested. We will create that in the next step.</p>

<h3>Creating our API</h3>

<p>Our API is for demonstration purposes only, so I&#8217;m going to go ahead and provide a quick
stub API that will pass our expectations. Enter the following code into <strong>application/routes.php</strong>.</p>

<figure class='code'><figcaption><span>application/routes.php (routes.php)</span> <a href='http://kloy.github.com/downloads/code/testing-rest-api-with-behat/routes.php'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="c1">// in application/routes.php</span>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">post</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;userId&#39;</span> <span class="o">=&gt;</span> <span class="mi">1</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">),</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/json&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">get</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;name&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;Chris&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">),</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/json&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Route</span><span class="o">::</span><span class="na">delete</span><span class="p">(</span><span class="s1">&#39;user&#39;</span><span class="p">,</span> <span class="k">function</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nv">$data</span> <span class="o">=</span> <span class="k">array</span><span class="p">(</span><span class="s1">&#39;status&#39;</span> <span class="o">=&gt;</span> <span class="s2">&quot;true&quot;</span><span class="p">);</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Response</span><span class="o">::</span><span class="na">make</span><span class="p">(</span><span class="nb">json_encode</span><span class="p">(</span><span class="nv">$data</span><span class="p">),</span> <span class="mi">200</span><span class="p">,</span>
</span><span class='line'>        <span class="k">array</span><span class="p">(</span><span class="s1">&#39;Content-Type&#39;</span> <span class="o">=&gt;</span> <span class="s1">&#39;application/json&#39;</span><span class="p">));</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Go ahead and run <strong>bin/behat features/user.feature</strong> and you should get all green with a
message like so&#8230;</p>

<pre><code>Feature: Testing the RESTfulness of the Index controller
Let's see how RESTish this is

  Scenario: Creating a new User                      # features/user.feature:4
    Given that I want to make a new "User"           # RestContext::thatIWantToMakeANew()
    And that its "name" is "Chris"                   # RestContext::thatTheItsIs()
    When I request "/user"                           # RestContext::iRequest()
    Then the response is JSON                        # RestContext::theResponseIsJson()
    And the response has a "userId" property         # RestContext::theResponseHasAProperty()
    And the type of the "userId" property is numeric # RestContext::theTypeOfThePropertyIsNumeric()
    Then the response status code should be 200      # RestContext::theResponseStatusCodeShouldBe()

  Scenario: Finding a User                           # features/user.feature:13
    Given that I want to find a "User"               # RestContext::thatIWantToFindA()
    And that its "name" is "Chris"                   # RestContext::thatTheItsIs()
    When I request "/user"                           # RestContext::iRequest()
    Then the "name" property equals "Chris"          # RestContext::thePropertyEquals()

  Scenario: Deleting a User                          # features/user.feature:19
    Given that I want to delete a "User"             # RestContext::thatIWantToDeleteA()
    And that its "name" is "Chris"                   # RestContext::thatTheItsIs()
    When I request "/user"                           # RestContext::iRequest()
    Then the "status" property equals "true"         # RestContext::thePropertyEquals()

3 scenarios (3 passed)
15 steps (15 passed)
0m0.131s
</code></pre>

<h3>Closing notes</h3>

<p>Now that we have a REST API in place and a Rest Context for behat you should be able to
see how we could test any REST API. If you need more steps to use when testing your REST
APIs just add them to the RestContext class and they will then be available to use in your
Gherkin features.</p>

<h3>Credits</h3>

<p>This article was heavily inspired by
<a href="http://blog.phpdeveloper.org/?p=456">behat + fuelphp = restful testing happiness</a> written
by Chris Cornutt. The RestContext class is just a refactor of his FeatureContextRest class
to allow using it as a sub context which I feel makes it more natural to use and easier to
reuse in projects. I also wanted to make a point that principals apply to any REST API and
not just one built with FuelPHP.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Yaml config files in Laravel]]></title>
    <link href="http://kloy.github.com/blog/2012/04/11/yaml-config-files-in-laravel/"/>
    <updated>2012-04-11T08:14:00-05:00</updated>
    <id>http://kloy.github.com/blog/2012/04/11/yaml-config-files-in-laravel</id>
    <content type="html"><![CDATA[<p>One of the new features in laravel 3.1 is being able to listen for the the Config::loader event
allowing for more control over how config files are loaded. With a little bit of work we&#8217;ll
be able to utilize this &#8220;hook&#8221; to load config files written in yaml as well as php.</p>

<!--more-->


<h3>Getting a yaml parser</h3>

<p>Before we can use yaml files as configs, we need a way to parse yaml in php. The best
and easiest yaml parser I know of for PHP is symfony&#8217;s. We can install symfony&#8217;s yaml
component using composer. If you don&#8217;t already have composer integrated into your laravel
app go ahead and checkout my article on
<a href="http://www.keithloy.me/2012/04/composer-with-laravel/">Composer with laravel</a>.</p>

<p>Now that you have composer integrated make sure your <strong>composer.json</strong> file looks like so&#8230;</p>

<figure class='code'><figcaption><span>/path/to/my/project/composer.json (composer.json)</span> <a href='http://kloy.github.com/downloads/code/yaml-config-files-in-laravel/composer.json'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='json'><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="nt">&quot;require&quot;</span><span class="p">:</span> <span class="p">{</span>
</span><span class='line'>        <span class="nt">&quot;php&quot;</span><span class="p">:</span> <span class="s2">&quot;&gt;=5.3.0&quot;</span><span class="p">,</span>
</span><span class='line'>        <span class="nt">&quot;symfony/yaml&quot;</span><span class="p">:</span> <span class="s2">&quot;2.0.*&quot;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>And run a composer install if you have not already run composer install, else run composer
update.</p>

<pre><code>cd /path/to/my/project
php composer.phar install # only if not already installed
php composer.phar update
</code></pre>

<p>You should now have the symfony yaml component.</p>

<h3>Register the yaml parser</h3>

<p>Before we can use the parser, we need to register the parser in our IoC container.
We will do that now by adding the following code to the bottom of <strong>start.php</strong>.</p>

<figure class='code'><figcaption><span>/path/to/my/project/application/start.php  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="x">IoC::singleton(&#39;yaml_parser&#39;, function()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    return new \Symfony\Component\Yaml\Parser();</span>
</span><span class='line'><span class="x">});</span>
</span><span class='line'>
</span><span class='line'><span class="x">IoC::singleton(&#39;yaml_dumper&#39;, function()</span>
</span><span class='line'><span class="x">{</span>
</span><span class='line'><span class="x">    return new \Symfony\Component\Yaml\Dumper();</span>
</span><span class='line'><span class="x">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>What we just did was register the symfony yaml Dumper and Parser objects as singletons
in our IoC container. We can now get an instance of the yaml parser at any time by calling: <code>$parser = IoC::resolve('yaml_parser');</code></p>

<h3>Listening to the load event</h3>

<p>Time to hook into that load event mentioned in the intro. We will need to change the
default <strong>Config::loader</strong> event in <strong>/path/to/project/application/start.php</strong> to use
our <code>Config::file()</code> function instead of the default <code>Laravel\Config::file()</code>
function. We could technically implement an entirely new file loading process for config
files here, but we only wish to extend the default functionality to meet our needs.
And&#8230; Here&#8217;s the code.</p>

<figure class='code'><figcaption><span>/path/to/my/project/application/start.php (start.php)</span> <a href='http://kloy.github.com/downloads/code/yaml-config-files-in-laravel/start.php'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="cm">/*</span>
</span><span class='line'><span class="cm">|--------------------------------------------------------------------------</span>
</span><span class='line'><span class="cm">| Laravel Configuration Loader</span>
</span><span class='line'><span class="cm">|--------------------------------------------------------------------------</span>
</span><span class='line'><span class="cm">|</span>
</span><span class='line'><span class="cm">| The Laravel configuration loader is responsible for returning an array</span>
</span><span class='line'><span class="cm">| of configuration options for a given bundle and file. By default, we</span>
</span><span class='line'><span class="cm">| use the files provided with Laravel; however, you are free to use</span>
</span><span class='line'><span class="cm">| your own storage mechanism for configuration arrays.</span>
</span><span class='line'><span class="cm">|</span>
</span><span class='line'><span class="cm">*/</span>
</span><span class='line'>
</span><span class='line'><span class="nx">Laravel\Event</span><span class="o">::</span><span class="na">listen</span><span class="p">(</span><span class="nx">Laravel\Config</span><span class="o">::</span><span class="na">loader</span><span class="p">,</span> <span class="k">function</span><span class="p">(</span><span class="nv">$bundle</span><span class="p">,</span> <span class="nv">$file</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">require_once</span> <span class="nx">path</span><span class="p">(</span><span class="s1">&#39;app&#39;</span><span class="p">)</span><span class="o">.</span><span class="s1">&#39;libraries&#39;</span><span class="o">.</span><span class="nx">DS</span><span class="o">.</span><span class="s1">&#39;myconfig.php&#39;</span><span class="p">;</span>
</span><span class='line'>  <span class="k">return</span> <span class="nx">MyConfig</span><span class="o">::</span><span class="na">file</span><span class="p">(</span><span class="nv">$bundle</span><span class="p">,</span> <span class="nv">$file</span><span class="p">);</span>
</span><span class='line'>  <span class="c1">// return Laravel\Config::file($bundle, $file);</span>
</span><span class='line'><span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>The require_once might have you scratching your head a bit if you are use to using
Laravel&#8217;s autoloader. This is a work around as the autoloaders don&#8217;t get initialized
until later in the start process and if we registered an autoloader for our myconfig.php
file it would actually get registered twice since the libraries dir get&#8217;s registered as
well.</p>

<h3>MyConfig::file()</h3>

<p>This is where we extend, or technically override, the default <code>Laravel\Config::file()</code>
function. On the with code!</p>

<figure class='code'><figcaption><span>/path/to/my/project/application/libraries/myconfig.php (myconfig.php)</span> <a href='http://kloy.github.com/downloads/code/yaml-config-files-in-laravel/myconfig.php'>download</a></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'>
</span><span class='line'><span class="k">class</span> <span class="nc">MyConfig</span> <span class="k">extends</span> <span class="nx">Laravel\Config</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="sd">/**</span>
</span><span class='line'><span class="sd">   * Load the configuration items from a configuration file.</span>
</span><span class='line'><span class="sd">   *</span>
</span><span class='line'><span class="sd">   * @param  string  $bundle</span>
</span><span class='line'><span class="sd">   * @param  string  $file</span>
</span><span class='line'><span class="sd">   * @return array</span>
</span><span class='line'><span class="sd">   */</span>
</span><span class='line'>  <span class="k">public</span> <span class="k">static</span> <span class="k">function</span> <span class="nf">file</span><span class="p">(</span><span class="nv">$bundle</span><span class="p">,</span> <span class="nv">$file</span><span class="p">)</span>
</span><span class='line'>  <span class="p">{</span>
</span><span class='line'>    <span class="nv">$config</span> <span class="o">=</span> <span class="k">array</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="c1">// Configuration files cascade. Typically, the bundle configuration array is</span>
</span><span class='line'>    <span class="c1">// loaded first, followed by the environment array, providing the convenient</span>
</span><span class='line'>    <span class="c1">// cascading of configuration options across environments.</span>
</span><span class='line'>    <span class="k">foreach</span> <span class="p">(</span><span class="k">static</span><span class="o">::</span><span class="na">paths</span><span class="p">(</span><span class="nv">$bundle</span><span class="p">)</span> <span class="k">as</span> <span class="nv">$directory</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>      <span class="nv">$semi_path</span> <span class="o">=</span> <span class="nv">$directory</span><span class="o">.</span><span class="nv">$file</span><span class="p">;</span>
</span><span class='line'>      <span class="k">if</span> <span class="p">(</span><span class="nv">$directory</span> <span class="o">!==</span> <span class="s1">&#39;&#39;</span><span class="p">)</span>
</span><span class='line'>      <span class="p">{</span>
</span><span class='line'>        <span class="c1">// Typical php configs are most common, so check first.</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$path</span> <span class="o">=</span> <span class="nv">$semi_path</span><span class="o">.</span><span class="nx">EXT</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nv">$config</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$config</span><span class="p">,</span> <span class="k">require</span> <span class="nv">$path</span><span class="p">);</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="c1">// Let&#39;s get a yaml config</span>
</span><span class='line'>        <span class="k">else</span> <span class="k">if</span> <span class="p">(</span><span class="nb">file_exists</span><span class="p">(</span><span class="nv">$path</span> <span class="o">=</span> <span class="s2">&quot;</span><span class="si">$semi_path</span><span class="s2">.yml&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>          <span class="nv">$parser</span> <span class="o">=</span> <span class="nx">IoC</span><span class="o">::</span><span class="na">resolve</span><span class="p">(</span><span class="s1">&#39;yaml_parser&#39;</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$contents</span> <span class="o">=</span> <span class="nb">file_get_contents</span><span class="p">(</span><span class="nv">$path</span><span class="p">);</span>
</span><span class='line'>          <span class="nv">$config</span> <span class="o">=</span> <span class="nb">array_merge</span><span class="p">(</span><span class="nv">$config</span><span class="p">,</span> <span class="nv">$parser</span><span class="o">-&gt;</span><span class="na">parse</span><span class="p">(</span><span class="nv">$contents</span><span class="p">));</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>      <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">return</span> <span class="nv">$config</span><span class="p">;</span>
</span><span class='line'>  <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Final notes</h3>

<p>We can now use yaml files as config files. Nothing special is needed when calling <code>Config::get()</code>,
just use it as normal. For the astute programmer, you may notice that you can easily
add more config parsers in the if, if else block.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Laravel as a git submodule]]></title>
    <link href="http://kloy.github.com/blog/2012/04/10/laravel-as-a-git-submodule/"/>
    <updated>2012-04-10T08:05:00-05:00</updated>
    <id>http://kloy.github.com/blog/2012/04/10/laravel-as-a-git-submodule</id>
    <content type="html"><![CDATA[<p>Laravel is a very active framework with minor patches every few days it seems. It is nice
to be able to easily integrate these patches, as they usually contain bug fixes, into our
applications easily. I&#8217;ll present the method I use for achieving this which utilizes
<a href="http://book.git-scm.com/5_submodules.html">git submodules</a>.</p>

<!--more-->


<h3>Get laravel</h3>

<p>First let&#8217;s go ahead and download <a href="http://laravel.com/download">laravel</a>. I&#8217;m assuming
you know how to install the default laravel app on your own server.</p>

<h3>Remove the framework</h3>

<p>Now that we have laravel we are going to do something that seems kind of awkward, delete
the framework. We are doing this as we will be including the framework as a git
submodule shortly.</p>

<pre><code>$ cd /path/to/my/app
$ rm -rf laravel
</code></pre>

<p>You can of course just use your file browser as well :-D</p>

<h3>Setting up git</h3>

<p>I&#8217;ll assume this is a brand new project where we need to go ahead and setup a git repo.
Let&#8217;s do that.</p>

<pre><code>$ cd /path/to/my/app
$ git init
</code></pre>

<p>Ok, we have our git repo, now let&#8217;s include laravel as a git submodule.</p>

<pre><code>$ cd /path/to/my/app
$ git submodule add https://github.com/laravel/laravel
</code></pre>

<p>You should now have a laravel dir in your app. The framework is actually nested in
<strong>laravel/laravel</strong>.</p>

<h3>Correcting the sys path</h3>

<p>Currently <strong>path(&#8216;sys&#8217;)</strong> expects laravel to be in <strong>/path/to/my/app/laravel</strong> but ours
is in <strong>/path/to/my/app/laravel/laravel</strong>. Let&#8217;s fix that. Open <strong>/path/to/my/app/paths.php</strong>
and modify it too look like so.</p>

<pre><code>// /path/to/my/app/paths.php
// --------------------------------------------------------------
// The path to the Laravel directory.
// --------------------------------------------------------------
$paths['sys'] = 'laravel/laravel';
</code></pre>

<p>Laravel is now included in your app as a git submodule and will work as any other git
submodule would! I personally fork laravel and use my forked repo instead of using laravel&#8217;s
repo to allow for easily contributing back to laravel via pull requests on github. I&#8217;d
advocate this method if you are familiar with forking.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Composer with Laravel]]></title>
    <link href="http://kloy.github.com/blog/2012/04/10/composer-with-laravel/"/>
    <updated>2012-04-10T05:23:00-05:00</updated>
    <id>http://kloy.github.com/blog/2012/04/10/composer-with-laravel</id>
    <content type="html"><![CDATA[<p>Something I needed in my projects was the ability to seemlessly use
<a href="http://getcomposer.org/">composer</a> to manage some of my packages as well as third party
ones such as the symfony components. With a little digging and a bit of work, I achieved
this goal. In this article I&#8217;ll walk you through the process.</p>

<!--more-->


<h3>Let&#8217;s do this</h3>

<p>Firstly, lets install composer.</p>

<pre><code># navigate to your project
$ cd /path/to/my/project
# install composer
$ curl -s http://getcomposer.org/installer | php
</code></pre>

<p>Now create a <strong>composer.json</strong> file in the top path of your project. Here is my
<strong>composer.json</strong> file for reference.</p>

<pre><code># in /path/to/my/project/composer.json
{
    "require": {
        "php": "&gt;=5.3.0",
        "kloy/cli": "0.0.*",
        "vendor/package": "version",
        ...
    }
}
</code></pre>

<p>Since we have a <strong>composer.json</strong> file, we can now install our composer packages.</p>

<pre><code># Install composer packages
$ php composer.phar install
</code></pre>

<p>All your packages should now be installed in <strong>/path/to/my/project/vendors</strong>. We need to
setup laravel to use the composer autoloader now.</p>

<p>Modify your <strong>paths.php</strong> file to have a path for where composer installs it&#8217;s packages.</p>

<pre><code># in /path/to/my/project/paths.php
// --------------------------------------------------------------
// The path to the composer vendors directory.
// --------------------------------------------------------------
$paths['composer'] = 'vendor';
</code></pre>

<p>Last thing to do is make sure <strong>index.php</strong> is requiring the composer packages using the
composer autoloader. Add the following code to the <strong>index.php</strong> script.</p>

<pre><code># in /path/to/my/project/public/index.php
// --------------------------------------------------------------
// Set the core Laravel path constants.
// --------------------------------------------------------------
require '../paths.php';

// --------------------------------------------------------------
// Autoload composer vendors.
// --------------------------------------------------------------
require path('composer').DS.'.composer'.DS.'autoload.php';
</code></pre>

<p>If you want the composer autoloader to work in artisan as well, just add the same require
from above to the artisan script. You could put the require statement for composer&#8217;s
autolaoder in start.php, but this would need to be done for all bundles as well.</p>

<p>Congratualtions! You will now be able to use your composer packages in your application
and bundles.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Testing Suite for jRuby on Rails with RSpec]]></title>
    <link href="http://kloy.github.com/blog/2011/02/12/testing-suite-for-jruby-on-rails-with-rspec/"/>
    <updated>2011-02-12T21:08:00-06:00</updated>
    <id>http://kloy.github.com/blog/2011/02/12/testing-suite-for-jruby-on-rails-with-rspec</id>
    <content type="html"><![CDATA[<p>It took me some time to figure out how to setup a performant testing environment in Rails 3 when using
jRuby in my development environment. Therefore, I bring you a tutorial on how to setup my testing
environment to hopefully save you time if you must also go down this path. I have chosen to use the following
tools in my testing environment: Rspec for BDD, Spork to decrease loading time of Rails and decrease the time
it takes to run RSpec tests, ZenTest for auto-testing, and Nailgun to decrease the time to load the JVM.</p>

<!--more-->


<h3>A few things to note</h3>

<p>A few things to note before starting this tutorial are as follows. Whenever you see the character &#8220;$&#8221; this denotes
a terminal command. Type the command following the &#8220;$&#8221; into terminal to execute the command. Also, my text editor
of choice is Textmate, so if you see &#8220;mate&#8221; in a command replace it with whatever your editor of choice is. One last
note before we start. I use &#8220;&#8230;&#8221; or the vertical form of &#8220;&#8230;&#8221; to represent additional code pre-existing above.</p>

<p>This tutorial assumes you are using jruby with RVM.
If you are not using RVM for your jruby installation
you need to use &#8220;jruby -S&#8221; instead of &#8220;ruby&#8221; when
executing commands as well as prefix &#8220;gem install&#8221;
with &#8220;jruby -S&#8221;. For example, &#8220;jruby -S gem install
ZenTest&#8221;.</p>

<p>I highly recommend using RVM. If you would like
information on how to install RVM, as well as using
RVM to install jruby checkout one of my previous posts
<a href="http://www.keithloy.me/2011/02/install-jruby-on-rails-with-rvm/">Install jRuby on Rails with RVM</a></p>

<h3>Step 1 :: Install RSpec</h3>

<p>RSpec is a Behaviour-Driven Development tool for Ruby programmers.
RSpec provides clean and readable self documenting tests.</p>

<p><em>Create app without tests</em>
<code>$ rails new demo -T</code></p>

<p><em>Edit Gemfile</em>
<code>$ mate Gemfile</code></p>

<pre><code>.
.
.
group :development do
    gem 'rspec-rails', '2.5.0'
end
group :test do
    gem 'rspec', '2.5.0'
end
</code></pre>

<p><em>Install rspec for your current Rails project</em>
<code>$ rails generate rspec:install</code></p>

<h3>Step 2 :: Install Spork</h3>

<p>Spork will greatly decrease the amount of time it takes to run
your rspec tests. Unfortunately it does not work with jruby
by default so we will need to grab a special branch of
the gem.</p>

<p><em>Grab jruby version of Spork</em>
<code>$ git clone git://github.com/rdp/spork.git</code>
<code>$ cd spork</code>
<code>$ gem build spork.gemspec</code>
<code>$ gem install spork-0.8.3</code></p>

<p>Now we want to have rspec utilize spork whenever running RSpec tests.</p>

<p><em>Edit .rspec</em>
<code>$ mate .rspec</code></p>

<p><em>Add the following line to .rspec</em>
<code>--drb</code></p>

<p>Bootstrapping spork will modify RSpec&#8217;s helpers to use Spork
in the current Rails project when RSpec is ran.</p>

<p><em>Bootstrap spork</em>
<code>$ spork --bootstrap</code></p>

<h3>Spork hacks for Rails 3</h3>

<p>Spork will not work with Rails 3, so we need to edit a couple
of files in order for it to work.</p>

<p><em>Edit spec/spec_helper.rb</em></p>

<pre><code>Spork.prefork do
  # Loading more in this block will cause your tests to run faster. However,
  # if you change any configuration or code from libraries loaded here, you'll
  # need to restart spork for it take effect.
  ENV["RAILS_ENV"] ||= 'test'
  unless defined?(Rails)
    require File.dirname(__FILE__) + "/../config/environment"
  end
  require 'rspec/rails'

  # Requires supporting files with custom matchers and macros, etc,
  # in ./support/ and its subdirectories.
  Dir["#{File.dirname(__FILE__)}/support/**/*.rb"].each {|f| require f}

  Rspec.configure do |config|
    # == Mock Framework
    #
    # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:
    #
    # config.mock_with :mocha
    # config.mock_with :flexmock
    # config.mock_with :rr
    config.mock_with :rspec

    config.fixture_path = "#{::Rails.root}/spec/fixtures"

    # If you're not using ActiveRecord, or you'd prefer not to run each of your
    # examples within a transaction, comment the following line or assign false
    # instead of true.
    config.use_transactional_fixtures = true

    ### Part of a Spork hack. See http://bit.ly/arY19y
    # Emulate initializer set_clear_dependencies_hook in
    # railties/lib/rails/application/bootstrap.rb
    ActiveSupport::Dependencies.clear
  end
end
</code></pre>

<p><em>Edit config/application.rb</em></p>

<pre><code>class Application &lt; Rails::Application
  .
  .
  .
    ### Part of a Spork hack. See http://bit.ly/arY19y
    if Rails.env.test?
      initializer :after =&gt; :initialize_dependency_mechanism do
            # Work around initializer in railties/lib/rails/application/bootstrap.rb
            ActiveSupport::Dependencies.mechanism = :load
        end
    end
end
</code></pre>

<h3>Step 3 :: Install ZenTest for auto-testing</h3>

<p>ZenTest is a gem that will automatically run your test suite when a file change occurs.</p>

<p><em>Run the following command to install ZenTest</em>
<code>$ gem install ZenTest</code></p>

<p>To start autotest you must run it from the the root of your Rails project of your dir.</p>

<p><em>Start autotest</em>
<code>$ autotest</code></p>

<h3>Step 4 :: Bonus: Startup Nailgun</h3>

<p><strong>This step is not necessary, but has allowed me to run my tests in under two seconds
on my machine.</strong></p>

<p>Nailgun is a server that keeps a JVM open. This minimizes the time our test suite takes
to run as the JVM is not required to load whenever we run our tests.</p>

<p><em>Start the Nailgun server</em>
<code>$ ruby --ng-server &amp;</code></p>

<p>Now that the Nailgun server is running navigate to your Rails project&#8217;s dir in terminal.</p>

<p><em>Run RSpec tests using the Nailgun Server</em>
<code>$ ruby --ng rspec spec/</code></p>

<p>Your tests should now be running significantly faster with the help of nailgun and spork!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install jRuby on Rails with RVM]]></title>
    <link href="http://kloy.github.com/blog/2011/02/05/install-jruby-on-rails-with-rvm/"/>
    <updated>2011-02-05T20:57:00-06:00</updated>
    <id>http://kloy.github.com/blog/2011/02/05/install-jruby-on-rails-with-rvm</id>
    <content type="html"><![CDATA[<p>Recently I was asked to switch to using Rails for a new project at my job. At my company we have
had nightmares deploying our PHP applications on multiple customers environments, therefore I was
asked to use jRuby instead of Ruby so that we may deploy with the JVM. In my research I came
across <a href="http://rvm.beginrescueend.com/">RVM</a> (Ruby Version Manager), a great app
for managing multiple version of Ruby and/or jRuby on a single machine. In the following
tutorial I will demonstrate how to install RVM and then use it to install jRuby and create
a gem set. Finally we will install Rails and launch a development server to demonstrate it
working.</p>

<!--more-->


<h3>A few things to know</h3>

<p>When going through this tutorial, the following information is important. Whenever you see
the symbol &#8220;$&#8221; this denotes the following text is a command to type in terminal. My text
editor of choice is Textmate, so in my commands you will see &#8220;mate&#8221; sometimes. Feel free to
replace &#8220;mate&#8221; with &#8220;nano&#8221;, &#8220;vim&#8221;, or which ever your editor of choice might be. Also, I am
on OS X, so if you are using another Unix OS, replace my instructions to edit &#8220;.profile&#8221;
with &#8220;.bashrc&#8221; or equivalent.</p>

<h3>Step 1 :: Install RVM (Ruby Version Manager)</h3>

<p><em>Install RVM</em>
<code>$ bash &lt; &lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head )</code></p>

<p><em>Open .profile</em>
<code>$ mate ~/.profile</code></p>

<p><em>Insert the following function at the bottom of the .profile file and save</em></p>

<pre><code># This loads RVM into a shell session.
[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm"
</code></pre>

<p><em>Now verify RVM is properly installed</em>
<code>$ type rvm | head -1</code></p>

<p><em>You should see the following printed in terminal</em>
<code>rvm is a function</code></p>

<h3>Step 2 :: Install jRuby</h3>

<p><em>Install jRuby with RVM</em>
<code>$ rvm install jruby-1.5.6</code>
<code>$ rvm jruby-1.5.6</code></p>

<p><em>Check ruby version in terminal</em>
<code>$ ruby -v</code></p>

<h3>Step 3 :: Create and set default gem set</h3>

<p>A gem set is a collection of gems you may have for a particular project. The gem set is associated with the current version of
Ruby being used by RVM. Gem sets are useful for having complete control over which versions of gems you use for each project.</p>

<p><em>Create a gemset</em>
<code>$ rvm --create use jruby-1.5.6@example</code></p>

<p><em>Set new gemset to the default RVM uses</em>
<code>$ rvm --default use jruby-1.5.6@example</code></p>

<h3>Step 4 :: Install Rails</h3>

<p><strong>Note DO NOT RUN GEM COMMANDS AS SUDO.</strong> Sudo is different user and circumnavigates where gems are stored relative to where RVM places them.</p>

<p><em>Install Rails</em>
<code>$ gem install rails --version 3.0.3</code></p>

<h3>Step 5 :: Create Rails project</h3>

<p><em>Create new Rails project and switch to it</em>
<code>$ rails new demo</code>
<code>$ cd demo</code></p>

<h3>Step 6 :: Modify Gemfile</h3>

<p><em>Edit the Gemfile</em>
<code>$ mate Gemfile</code></p>

<p><em>Replace the contents of Gemfile with the following.</em></p>

<pre><code>source 'http://rubygems.org'

gem 'rails', '3.0.3'

if defined?(JRUBY_VERSION)
  gem 'jdbc-sqlite3', '3.6.14.2.056'
  gem 'activerecord-jdbc-adapter', '1.1.1'
  gem 'activerecord-jdbcsqlite3-adapter', '1.1.1'
  gem 'jruby-openssl', '0.7.3'
else
  gem 'sqlite3-ruby', :require =&gt; 'sqlite3'
end
</code></pre>

<h3>Step 7 :: Install gems with bundle</h3>

<p><em>Install all of the gems in your Gemfile</em>
<code>$ bundle install</code></p>

<h3>Step 8 :: Startup WEBrick and checkout your app!</h3>

<p><em>Start a rails development server</em>
<code>$ rails server</code></p>

<p>Load a browser and navigate to http://localhost:3000 to checkout your dummy app.</p>
]]></content>
  </entry>
  
</feed>
