<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby on Rails | Keith Loy]]></title>
  <link href="http://kloy.github.com/blog/categories/ruby-on-rails/atom.xml" rel="self"/>
  <link href="http://kloy.github.com/"/>
  <updated>2012-10-05T22:17:50-05:00</updated>
  <id>http://kloy.github.com/</id>
  <author>
    <name><![CDATA[Keith Loy]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Testing Suite for jRuby on Rails with RSpec]]></title>
    <link href="http://kloy.github.com/blog/2011/02/12/testing-suite-for-jruby-on-rails-with-rspec/"/>
    <updated>2011-02-12T21:08:00-06:00</updated>
    <id>http://kloy.github.com/blog/2011/02/12/testing-suite-for-jruby-on-rails-with-rspec</id>
    <content type="html"><![CDATA[<p>It took me some time to figure out how to setup a performant testing environment in Rails 3 when using
jRuby in my development environment. Therefore, I bring you a tutorial on how to setup my testing
environment to hopefully save you time if you must also go down this path. I have chosen to use the following
tools in my testing environment: Rspec for BDD, Spork to decrease loading time of Rails and decrease the time
it takes to run RSpec tests, ZenTest for auto-testing, and Nailgun to decrease the time to load the JVM.</p>

<!--more-->


<h3>A few things to note</h3>

<p>A few things to note before starting this tutorial are as follows. Whenever you see the character "$" this denotes
a terminal command. Type the command following the "$" into terminal to execute the command. Also, my text editor
of choice is Textmate, so if you see "mate" in a command replace it with whatever your editor of choice is. One last
note before we start. I use "..." or the vertical form of "..." to represent additional code pre-existing above.</p>

<p>This tutorial assumes you are using jruby with RVM.
If you are not using RVM for your jruby installation
you need to use "jruby -S" instead of "ruby" when
executing commands as well as prefix "gem install"
with "jruby -S". For example, "jruby -S gem install
ZenTest".</p>

<p>I highly recommend using RVM. If you would like
information on how to install RVM, as well as using
RVM to install jruby checkout one of my previous posts
<a href="http://www.keithloy.me/2011/02/install-jruby-on-rails-with-rvm/">Install jRuby on Rails with RVM</a></p>

<h3>Step 1 :: Install RSpec</h3>

<p>RSpec is a Behaviour-Driven Development tool for Ruby programmers.
RSpec provides clean and readable self documenting tests.</p>

<p><em>Create app without tests</em>
<code>$ rails new demo -T</code></p>

<p><em>Edit Gemfile</em>
<code>$ mate Gemfile</code></p>

<pre><code>.
.
.
group :development do
    gem 'rspec-rails', '2.5.0'
end
group :test do
    gem 'rspec', '2.5.0'
end
</code></pre>

<p><em>Install rspec for your current Rails project</em>
<code>$ rails generate rspec:install</code></p>

<h3>Step 2 :: Install Spork</h3>

<p>Spork will greatly decrease the amount of time it takes to run
your rspec tests. Unfortunately it does not work with jruby
by default so we will need to grab a special branch of
the gem.</p>

<p><em>Grab jruby version of Spork</em>
<code>$ git clone git://github.com/rdp/spork.git</code>
<code>$ cd spork</code>
<code>$ gem build spork.gemspec</code>
<code>$ gem install spork-0.8.3</code></p>

<p>Now we want to have rspec utilize spork whenever running RSpec tests.</p>

<p><em>Edit .rspec</em>
<code>$ mate .rspec</code></p>

<p><em>Add the following line to .rspec</em>
<code>--drb</code></p>

<p>Bootstrapping spork will modify RSpec's helpers to use Spork
in the current Rails project when RSpec is ran.</p>

<p><em>Bootstrap spork</em>
<code>$ spork --bootstrap</code></p>

<h3>Spork hacks for Rails 3</h3>

<p>Spork will not work with Rails 3, so we need to edit a couple
of files in order for it to work.</p>

<p><em>Edit spec/spec_helper.rb</em></p>

<pre><code>Spork.prefork do
  # Loading more in this block will cause your tests to run faster. However,
  # if you change any configuration or code from libraries loaded here, you'll
  # need to restart spork for it take effect.
  ENV["RAILS_ENV"] ||= 'test'
  unless defined?(Rails)
    require File.dirname(__FILE__) + "/../config/environment"
  end
  require 'rspec/rails'

  # Requires supporting files with custom matchers and macros, etc,
  # in ./support/ and its subdirectories.
  Dir["#{File.dirname(__FILE__)}/support/**/*.rb"].each {|f| require f}

  Rspec.configure do |config|
    # == Mock Framework
    #
    # If you prefer to use mocha, flexmock or RR, uncomment the appropriate line:
    #
    # config.mock_with :mocha
    # config.mock_with :flexmock
    # config.mock_with :rr
    config.mock_with :rspec

    config.fixture_path = "#{::Rails.root}/spec/fixtures"

    # If you're not using ActiveRecord, or you'd prefer not to run each of your
    # examples within a transaction, comment the following line or assign false
    # instead of true.
    config.use_transactional_fixtures = true

    ### Part of a Spork hack. See http://bit.ly/arY19y
    # Emulate initializer set_clear_dependencies_hook in
    # railties/lib/rails/application/bootstrap.rb
    ActiveSupport::Dependencies.clear
  end
end
</code></pre>

<p><em>Edit config/application.rb</em></p>

<pre><code>class Application &lt; Rails::Application
  .
  .
  .
    ### Part of a Spork hack. See http://bit.ly/arY19y
    if Rails.env.test?
      initializer :after =&gt; :initialize_dependency_mechanism do
            # Work around initializer in railties/lib/rails/application/bootstrap.rb
            ActiveSupport::Dependencies.mechanism = :load
        end
    end
end
</code></pre>

<h3>Step 3 :: Install ZenTest for auto-testing</h3>

<p>ZenTest is a gem that will automatically run your test suite when a file change occurs.</p>

<p><em>Run the following command to install ZenTest</em>
<code>$ gem install ZenTest</code></p>

<p>To start autotest you must run it from the the root of your Rails project of your dir.</p>

<p><em>Start autotest</em>
<code>$ autotest</code></p>

<h3>Step 4 :: Bonus: Startup Nailgun</h3>

<p><strong>This step is not necessary, but has allowed me to run my tests in under two seconds
on my machine.</strong></p>

<p>Nailgun is a server that keeps a JVM open. This minimizes the time our test suite takes
to run as the JVM is not required to load whenever we run our tests.</p>

<p><em>Start the Nailgun server</em>
<code>$ ruby --ng-server &amp;</code></p>

<p>Now that the Nailgun server is running navigate to your Rails project's dir in terminal.</p>

<p><em>Run RSpec tests using the Nailgun Server</em>
<code>$ ruby --ng rspec spec/</code></p>

<p>Your tests should now be running significantly faster with the help of nailgun and spork!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install jRuby on Rails with RVM]]></title>
    <link href="http://kloy.github.com/blog/2011/02/05/install-jruby-on-rails-with-rvm/"/>
    <updated>2011-02-05T20:57:00-06:00</updated>
    <id>http://kloy.github.com/blog/2011/02/05/install-jruby-on-rails-with-rvm</id>
    <content type="html"><![CDATA[<p>Recently I was asked to switch to using Rails for a new project at my job. At my company we have
had nightmares deploying our PHP applications on multiple customers environments, therefore I was
asked to use jRuby instead of Ruby so that we may deploy with the JVM. In my research I came
across <a href="http://rvm.beginrescueend.com/">RVM</a> (Ruby Version Manager), a great app
for managing multiple version of Ruby and/or jRuby on a single machine. In the following
tutorial I will demonstrate how to install RVM and then use it to install jRuby and create
a gem set. Finally we will install Rails and launch a development server to demonstrate it
working.</p>

<!--more-->


<h3>A few things to know</h3>

<p>When going through this tutorial, the following information is important. Whenever you see
the symbol "$" this denotes the following text is a command to type in terminal. My text
editor of choice is Textmate, so in my commands you will see "mate" sometimes. Feel free to
replace "mate" with "nano", "vim", or which ever your editor of choice might be. Also, I am
on OS X, so if you are using another Unix OS, replace my instructions to edit ".profile"
with ".bashrc" or equivalent.</p>

<h3>Step 1 :: Install RVM (Ruby Version Manager)</h3>

<p><em>Install RVM</em>
<code>$ bash &lt; &lt;( curl http://rvm.beginrescueend.com/releases/rvm-install-head )</code></p>

<p><em>Open .profile</em>
<code>$ mate ~/.profile</code></p>

<p><em>Insert the following function at the bottom of the .profile file and save</em></p>

<pre><code># This loads RVM into a shell session.
[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm"
</code></pre>

<p><em>Now verify RVM is properly installed</em>
<code>$ type rvm | head -1</code></p>

<p><em>You should see the following printed in terminal</em>
<code>rvm is a function</code></p>

<h3>Step 2 :: Install jRuby</h3>

<p><em>Install jRuby with RVM</em>
<code>$ rvm install jruby-1.5.6</code>
<code>$ rvm jruby-1.5.6</code></p>

<p><em>Check ruby version in terminal</em>
<code>$ ruby -v</code></p>

<h3>Step 3 :: Create and set default gem set</h3>

<p>A gem set is a collection of gems you may have for a particular project. The gem set is associated with the current version of
Ruby being used by RVM. Gem sets are useful for having complete control over which versions of gems you use for each project.</p>

<p><em>Create a gemset</em>
<code>$ rvm --create use jruby-1.5.6@example</code></p>

<p><em>Set new gemset to the default RVM uses</em>
<code>$ rvm --default use jruby-1.5.6@example</code></p>

<h3>Step 4 :: Install Rails</h3>

<p><strong>Note DO NOT RUN GEM COMMANDS AS SUDO.</strong> Sudo is different user and circumnavigates where gems are stored relative to where RVM places them.</p>

<p><em>Install Rails</em>
<code>$ gem install rails --version 3.0.3</code></p>

<h3>Step 5 :: Create Rails project</h3>

<p><em>Create new Rails project and switch to it</em>
<code>$ rails new demo</code>
<code>$ cd demo</code></p>

<h3>Step 6 :: Modify Gemfile</h3>

<p><em>Edit the Gemfile</em>
<code>$ mate Gemfile</code></p>

<p><em>Replace the contents of Gemfile with the following.</em></p>

<pre><code>source 'http://rubygems.org'

gem 'rails', '3.0.3'

if defined?(JRUBY_VERSION)
  gem 'jdbc-sqlite3', '3.6.14.2.056'
  gem 'activerecord-jdbc-adapter', '1.1.1'
  gem 'activerecord-jdbcsqlite3-adapter', '1.1.1'
  gem 'jruby-openssl', '0.7.3'
else
  gem 'sqlite3-ruby', :require =&gt; 'sqlite3'
end
</code></pre>

<h3>Step 7 :: Install gems with bundle</h3>

<p><em>Install all of the gems in your Gemfile</em>
<code>$ bundle install</code></p>

<h3>Step 8 :: Startup WEBrick and checkout your app!</h3>

<p><em>Start a rails development server</em>
<code>$ rails server</code></p>

<p>Load a browser and navigate to http://localhost:3000 to checkout your dummy app.</p>
]]></content>
  </entry>
  
</feed>
